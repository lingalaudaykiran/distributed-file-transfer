-include("include.hrl").
-module(messageHandler).
-include("include_speakout.hrl").
-compile([export_all]).
%this server will be invoked when we start the server. Depending on the message sent from REST API, it will call inside functions
server() ->
	receive
		{ register, Phone, Name, Status, LanguageId, ProfilePic } ->
			
			case 	is_integer(Phone) andalso byte_size(integer_to_binary(Phone)) == 10 andalso is_integer(LanguageId) of 
			true -> 		
			addUser(Phone, Name, Status, LanguageId, ProfilePic),
			server();
			false ->
			server()
			end;

		{ sendMessage, SenderId, Binary, UserList } -> 
				speakout_pendData_DB_API:addData(SenderId, UserList, Binary, now()),
				serverBroadCast( SenderId, Binary,UserList),
				server();
		{block, BlockerId, UserList} ->
			speakout_blockTable_DB_API:blockUser(BlockerId,UserList),
			server();
		{unBlock, BlockerId,UserList} ->
		speakout_blockTable_DB_API:removedBlockUser(BlockerId,UserList),
		server()
		end.


		
%add new user if the phone number is not get registered
addUser(Phone, Name, Status, LanguageId, ProfilePic)  -> 
	ExistUserId = speakout_userinfo_DB_API:getUserIdbyPhone(Phone),
	UserId = speakout_userinfo_DB_API:addUser(Phone, Name, Status, LanguageId, ProfilePic),
	case UserId of
		wrongFormat -> wrongFormat;
		_ ->
		speakout_blockTable_DB_API:createEntry(UserId)
		end,
	case ExistUserId of 
	null ->
		UserId;
% here we need to send the userId generated by the mongoDB.
	_ ->
%here we need to send the existing userId with phone number
	userExist
	end.
	
%add data to the pendData table and send messages to each user
serverBroadCast( SenderId, Binary,UserList) -> 
		{Reciever, RemainingUsers} = extractUser(UserList),
		case Reciever of
		empty ->
			ok;
		_ ->
			serverTransfer(SenderId, Binary,Reciever),
			serverBroadCast( SenderId, Binary, RemainingUsers)
		end.


serverTransfer( SenderId, Binary,Reciever) ->
		
		list_to_atom(lists:flatten(io_lib:format("~p",[Reciever]))) ! {SenderId, Binary},
		sent.

extractUser([User|UserList]) -> {User, UserList};
extractUser([]) -> {empty, empty}.
extractUser() -> {empty, empty}.


registerServer(Receiver) ->

	register(list_to_atom(lists:flatten(io_lib:format("~p",[Receiver]))), spawn(messageHandler, receiver, [])).

receiver() ->
	receive
	{SenderId, Binary} -> 
			?WARNING("Reciever is ~p and Binary is ~s ~n ", [SenderId, Binary] )
	end.
